// Code generated by protoc-gen-go-cgrpc. DO NOT EDIT.
// version:
// 	protoc-gen-go-cgrpc v0.0.1
// 	protoc             v3.19.4
// source: api/config.proto

package api

import (
	context "context"
	cgrpc "github.com/chenjie199234/Corelib/cgrpc"
	error1 "github.com/chenjie199234/Corelib/error"
	log "github.com/chenjie199234/Corelib/log"
	metadata "github.com/chenjie199234/Corelib/metadata"
)

var _CGrpcPathConfigGroups = "/config.config/groups"
var _CGrpcPathConfigApps = "/config.config/apps"
var _CGrpcPathConfigGet = "/config.config/get"
var _CGrpcPathConfigSet = "/config.config/set"
var _CGrpcPathConfigRollback = "/config.config/rollback"
var _CGrpcPathConfigWatch = "/config.config/watch"

type ConfigCGrpcClient interface {
	//get all groups
	Groups(context.Context, *GroupsReq) (*GroupsResp, error)
	//get all apps in specific group
	Apps(context.Context, *AppsReq) (*AppsResp, error)
	//get one specific app's config
	Get(context.Context, *GetReq) (*GetResp, error)
	//set one specific app's config
	Set(context.Context, *SetReq) (*SetResp, error)
	//rollback one specific app's config
	Rollback(context.Context, *RollbackReq) (*RollbackResp, error)
	//watch on specific app's config
	Watch(context.Context, *WatchReq) (*WatchResp, error)
}

type configCGrpcClient struct {
	cc *cgrpc.CGrpcClient
}

func NewConfigCGrpcClient(c *cgrpc.CGrpcClient) ConfigCGrpcClient {
	return &configCGrpcClient{cc: c}
}

func (c *configCGrpcClient) Groups(ctx context.Context, req *GroupsReq) (*GroupsResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	resp := new(GroupsResp)
	if e := c.cc.Call(ctx, _CGrpcPathConfigGroups, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *configCGrpcClient) Apps(ctx context.Context, req *AppsReq) (*AppsResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	resp := new(AppsResp)
	if e := c.cc.Call(ctx, _CGrpcPathConfigApps, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *configCGrpcClient) Get(ctx context.Context, req *GetReq) (*GetResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	resp := new(GetResp)
	if e := c.cc.Call(ctx, _CGrpcPathConfigGet, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *configCGrpcClient) Set(ctx context.Context, req *SetReq) (*SetResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	resp := new(SetResp)
	if e := c.cc.Call(ctx, _CGrpcPathConfigSet, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *configCGrpcClient) Rollback(ctx context.Context, req *RollbackReq) (*RollbackResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	resp := new(RollbackResp)
	if e := c.cc.Call(ctx, _CGrpcPathConfigRollback, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *configCGrpcClient) Watch(ctx context.Context, req *WatchReq) (*WatchResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	resp := new(WatchResp)
	if e := c.cc.Call(ctx, _CGrpcPathConfigWatch, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}

type ConfigCGrpcServer interface {
	//get all groups
	Groups(context.Context, *GroupsReq) (*GroupsResp, error)
	//get all apps in specific group
	Apps(context.Context, *AppsReq) (*AppsResp, error)
	//get one specific app's config
	Get(context.Context, *GetReq) (*GetResp, error)
	//set one specific app's config
	Set(context.Context, *SetReq) (*SetResp, error)
	//rollback one specific app's config
	Rollback(context.Context, *RollbackReq) (*RollbackResp, error)
	//watch on specific app's config
	Watch(context.Context, *WatchReq) (*WatchResp, error)
}

func _Config_Groups_CGrpcHandler(handler func(context.Context, *GroupsReq) (*GroupsResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(GroupsReq)
		if ctx.DecodeReq(req) != nil {
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(GroupsResp)
		}
		ctx.Write(resp)
	}
}
func _Config_Apps_CGrpcHandler(handler func(context.Context, *AppsReq) (*AppsResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(AppsReq)
		if ctx.DecodeReq(req) != nil {
			ctx.Abort(error1.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/apps]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(AppsResp)
		}
		ctx.Write(resp)
	}
}
func _Config_Get_CGrpcHandler(handler func(context.Context, *GetReq) (*GetResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(GetReq)
		if ctx.DecodeReq(req) != nil {
			ctx.Abort(error1.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/get]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(GetResp)
		}
		ctx.Write(resp)
	}
}
func _Config_Set_CGrpcHandler(handler func(context.Context, *SetReq) (*SetResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(SetReq)
		if ctx.DecodeReq(req) != nil {
			ctx.Abort(error1.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/set]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(SetResp)
		}
		ctx.Write(resp)
	}
}
func _Config_Rollback_CGrpcHandler(handler func(context.Context, *RollbackReq) (*RollbackResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(RollbackReq)
		if ctx.DecodeReq(req) != nil {
			ctx.Abort(error1.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/rollback]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(RollbackResp)
		}
		ctx.Write(resp)
	}
}
func _Config_Watch_CGrpcHandler(handler func(context.Context, *WatchReq) (*WatchResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(WatchReq)
		if ctx.DecodeReq(req) != nil {
			ctx.Abort(error1.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/watch]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(WatchResp)
		}
		ctx.Write(resp)
	}
}
func RegisterConfigCGrpcServer(engine *cgrpc.CGrpcServer, svc ConfigCGrpcServer, allmids map[string]cgrpc.OutsideHandler) {
	//avoid lint
	_ = allmids
	engine.RegisterHandler("config.config", "groups", _Config_Groups_CGrpcHandler(svc.Groups))
	engine.RegisterHandler("config.config", "apps", _Config_Apps_CGrpcHandler(svc.Apps))
	engine.RegisterHandler("config.config", "get", _Config_Get_CGrpcHandler(svc.Get))
	engine.RegisterHandler("config.config", "set", _Config_Set_CGrpcHandler(svc.Set))
	engine.RegisterHandler("config.config", "rollback", _Config_Rollback_CGrpcHandler(svc.Rollback))
	engine.RegisterHandler("config.config", "watch", _Config_Watch_CGrpcHandler(svc.Watch))
}
