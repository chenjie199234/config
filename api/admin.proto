syntax="proto3";

//this is the proto package name,all proto in this project must use this name as the proto package name
package config;
//this is the golang's package name,all proto in this project must use this name as the golang's package name
option go_package="github.com/chenjie199234/config/api;api";
//https://github.com/chenjie199234/Corelib/blob/main/pbex/pbex.proto
import "pbex/pbex.proto";

//this is the proto file for admin service
service admin{
	//rpc example(examplereq)returns(exampleresp){
	//	option (pbex.method)="get";//can be set to get,delete,post,put,patch
	//	option (pbex.web_midwares)="b";
	//	option (pbex.web_midwares)="c";
	//	option (pbex.web_midwares)="a";//this function on web protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.crpc_midwares)="b";
	//	option (pbex.crpc_midwares)="c";
	//	option (pbex.crpc_midwares)="a";//this function on crpc protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.cgrpc_midwares)="b";
	//	option (pbex.cgrpc_midwares)="c";
	//	option (pbex.cgrpc_midwares)="a";//this function on grpc protocol has 3 midwares,it's order is b,c,a
	//}

	rpc login(login_req)returns(login_resp){
		option (pbex.method)="post";
	}

	rpc add_node(add_node_req)returns(add_node_resp){
		option (pbex.method)="post";
	}

	rpc update_node(update_node_req)returns(update_node_resp){
		option (pbex.method)="post";
	}

	rpc del_node(del_node_req)returns(del_node_resp){
		option (pbex.method)="post";
	}

	rpc list_node(list_node_req)returns(list_node_resp){
		option (pbex.method)="post";
	}
}
//req can be set with pbex extentions
//message examplereq{
	//int64 example_for_extentions=1[(pbex.int_gt)=1,(pbex.int_lt)=100];
//}
//resp's pbex extentions will be ignore
//message exampleresp{
	//int64 example_resp=1;
//}

message login_req {
}
message login_resp {
	string token=1;
}
message add_node_req {
	repeated uint32 pnode_id=1[(pbex.map_repeated_len_not_eq)=0];
	string node_name=2[(pbex.string_bytes_len_not_eq)=0];
	string node_data=3;
}
message add_node_resp {
}
message update_node_req {
	repeated uint32 node_id=1[(pbex.map_repeated_len_gt)=1];
	string node_name=2[(pbex.string_bytes_len_not_eq)=0];
	string node_data=3;
}
message update_node_resp {

}
message del_node_req {
	repeated uint32 node_id=1[(pbex.map_repeated_len_gt)=1];
}
message del_node_resp {
}
message list_node_req {
	repeated uint32 pnode_id=1[(pbex.map_repeated_len_not_eq)=0];
}
message list_node_resp {
	repeated node_info nodes=1;
}
message node_info {
	repeated uint32 node_id=1;
	string node_name=2;
	string node_data=3;
}
