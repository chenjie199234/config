// Code generated by protoc-gen-go-web. DO NOT EDIT.
// version:
// 	protoc-gen-go-web v0.0.1
// 	protoc            v3.19.4
// source: api/config.proto

package api

import (
	context "context"
	error1 "github.com/chenjie199234/Corelib/error"
	log "github.com/chenjie199234/Corelib/log"
	metadata "github.com/chenjie199234/Corelib/metadata"
	pool "github.com/chenjie199234/Corelib/pool"
	web "github.com/chenjie199234/Corelib/web"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	http "net/http"
	strings "strings"
)

var _WebPathConfigGroups = "/config.config/groups"
var _WebPathConfigApps = "/config.config/apps"
var _WebPathConfigGet = "/config.config/get"
var _WebPathConfigSet = "/config.config/set"
var _WebPathConfigRollback = "/config.config/rollback"

type ConfigWebClient interface {
	//get all groups
	Groups(context.Context, *GroupsReq, http.Header) (*GroupsResp, error)
	//get all apps in specific group
	Apps(context.Context, *AppsReq, http.Header) (*AppsResp, error)
	//get one specific app's config
	Get(context.Context, *GetReq, http.Header) (*GetResp, error)
	//set one specific app's config
	Set(context.Context, *SetReq, http.Header) (*SetResp, error)
	//rollback one specific app's config
	Rollback(context.Context, *RollbackReq, http.Header) (*RollbackResp, error)
}

type configWebClient struct {
	cc *web.WebClient
}

func NewConfigWebClient(c *web.WebClient) ConfigWebClient {
	return &configWebClient{cc: c}
}

func (c *configWebClient) Groups(ctx context.Context, req *GroupsReq, header http.Header) (*GroupsResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	data, e := c.cc.Post(ctx, _WebPathConfigGroups, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	resp := new(GroupsResp)
	if len(data) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(data, resp); e != nil {
		return nil, error1.ErrResp
	}
	return resp, nil
}
func (c *configWebClient) Apps(ctx context.Context, req *AppsReq, header http.Header) (*AppsResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	data, e := c.cc.Post(ctx, _WebPathConfigApps, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	resp := new(AppsResp)
	if len(data) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(data, resp); e != nil {
		return nil, error1.ErrResp
	}
	return resp, nil
}
func (c *configWebClient) Get(ctx context.Context, req *GetReq, header http.Header) (*GetResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	data, e := c.cc.Post(ctx, _WebPathConfigGet, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	resp := new(GetResp)
	if len(data) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(data, resp); e != nil {
		return nil, error1.ErrResp
	}
	return resp, nil
}
func (c *configWebClient) Set(ctx context.Context, req *SetReq, header http.Header) (*SetResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	data, e := c.cc.Post(ctx, _WebPathConfigSet, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	resp := new(SetResp)
	if len(data) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(data, resp); e != nil {
		return nil, error1.ErrResp
	}
	return resp, nil
}
func (c *configWebClient) Rollback(ctx context.Context, req *RollbackReq, header http.Header) (*RollbackResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	data, e := c.cc.Post(ctx, _WebPathConfigRollback, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	resp := new(RollbackResp)
	if len(data) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(data, resp); e != nil {
		return nil, error1.ErrResp
	}
	return resp, nil
}

type ConfigWebServer interface {
	//get all groups
	Groups(context.Context, *GroupsReq) (*GroupsResp, error)
	//get all apps in specific group
	Apps(context.Context, *AppsReq) (*AppsResp, error)
	//get one specific app's config
	Get(context.Context, *GetReq) (*GetResp, error)
	//set one specific app's config
	Set(context.Context, *SetReq) (*SetResp, error)
	//rollback one specific app's config
	Rollback(context.Context, *RollbackReq) (*RollbackResp, error)
}

func _Config_Groups_WebHandler(handler func(context.Context, *GroupsReq) (*GroupsResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GroupsReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				ctx.Abort(error1.ErrReq)
				return
			}
			data := pool.GetBuffer()
			defer pool.PutBuffer(data)
			data.AppendByte('{')
			data.AppendString("\"search_filter\":")
			if form := ctx.GetForm("search_filter"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte('}')
			if data.Len() > 2 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data.Bytes(), req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		}
		resp, e := handler(ctx, req)
		ee := error1.ConvertStdError(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GroupsResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Config_Apps_WebHandler(handler func(context.Context, *AppsReq) (*AppsResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(AppsReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				ctx.Abort(error1.ErrReq)
				return
			}
			data := pool.GetBuffer()
			defer pool.PutBuffer(data)
			data.AppendByte('{')
			data.AppendString("\"groupname\":")
			if form := ctx.GetForm("groupname"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"search_filter\":")
			if form := ctx.GetForm("search_filter"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte('}')
			if data.Len() > 2 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data.Bytes(), req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/apps]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := error1.ConvertStdError(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(AppsResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Config_Get_WebHandler(handler func(context.Context, *GetReq) (*GetResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GetReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				ctx.Abort(error1.ErrReq)
				return
			}
			data := pool.GetBuffer()
			defer pool.PutBuffer(data)
			data.AppendByte('{')
			data.AppendString("\"groupname\":")
			if form := ctx.GetForm("groupname"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"appname\":")
			if form := ctx.GetForm("appname"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"index\":")
			if form := ctx.GetForm("index"); len(form) == 0 {
				data.AppendString("0")
			} else {
				data.AppendString(form)
			}
			data.AppendByte('}')
			if data.Len() > 2 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data.Bytes(), req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/get]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := error1.ConvertStdError(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GetResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Config_Set_WebHandler(handler func(context.Context, *SetReq) (*SetResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(SetReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				ctx.Abort(error1.ErrReq)
				return
			}
			data := pool.GetBuffer()
			defer pool.PutBuffer(data)
			data.AppendByte('{')
			data.AppendString("\"groupname\":")
			if form := ctx.GetForm("groupname"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"appname\":")
			if form := ctx.GetForm("appname"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"app_config\":")
			if form := ctx.GetForm("app_config"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"source_config\":")
			if form := ctx.GetForm("source_config"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte('}')
			if data.Len() > 2 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data.Bytes(), req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/set]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := error1.ConvertStdError(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(SetResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Config_Rollback_WebHandler(handler func(context.Context, *RollbackReq) (*RollbackResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(RollbackReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				ctx.Abort(error1.ErrReq)
				return
			}
			data := pool.GetBuffer()
			defer pool.PutBuffer(data)
			data.AppendByte('{')
			data.AppendString("\"groupname\":")
			if form := ctx.GetForm("groupname"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"appname\":")
			if form := ctx.GetForm("appname"); len(form) == 0 {
				data.AppendString("\"\"")
			} else if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
				data.AppendByte('"')
				data.AppendString(form)
				data.AppendByte('"')
			} else {
				data.AppendString(form)
			}
			data.AppendByte(',')
			data.AppendString("\"index\":")
			if form := ctx.GetForm("index"); len(form) == 0 {
				data.AppendString("0")
			} else {
				data.AppendString(form)
			}
			data.AppendByte('}')
			if data.Len() > 2 {
				e := protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data.Bytes(), req)
				if e != nil {
					ctx.Abort(error1.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/config.config/rollback]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := error1.ConvertStdError(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(RollbackResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func RegisterConfigWebServer(engine *web.WebServer, svc ConfigWebServer, allmids map[string]web.OutsideHandler) {
	//avoid lint
	_ = allmids
	engine.Post(_WebPathConfigGroups, _Config_Groups_WebHandler(svc.Groups))
	engine.Post(_WebPathConfigApps, _Config_Apps_WebHandler(svc.Apps))
	engine.Post(_WebPathConfigGet, _Config_Get_WebHandler(svc.Get))
	engine.Post(_WebPathConfigSet, _Config_Set_WebHandler(svc.Set))
	engine.Post(_WebPathConfigRollback, _Config_Rollback_WebHandler(svc.Rollback))
}
